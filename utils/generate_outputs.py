




# Fun√ß√£o para salvar output_keys em markdown
async def save_output_keys_to_markdown(runner, user_id: str, session_id: str, timestamp: str):
    """
    Salva os output_keys dos agentes em arquivos markdown.
    
    Baseado na documenta√ß√£o do Google ADK, esta fun√ß√£o:
    1. Acessa o session state onde os output_keys s√£o armazenados
    2. Extrai o conte√∫do de cada output_key
    3. Salva em arquivos markdown organizados por agente
    4. Opcionalmente salva como artifacts para persist√™ncia
    """
    try:
        # Obter a sess√£o atual para acessar o state
        session = await runner.session_service.get_session(
            app_name=APP_NAME, user_id=user_id, session_id=session_id
        )
        
        # Lista dos output_keys dos agentes
        output_keys = [
            'enrichment_output',
            'structure_output', 
            'search_output',
            'tech_lead_output',
            'coder_output',
            'coder_reviewer_output'
        ]
        
        # Criar diret√≥rio para os arquivos markdown
        markdown_dir = f"outputs/markdown_{timestamp}"
        os.makedirs(markdown_dir, exist_ok=True)
        
        # Salvar cada output_key em arquivo markdown separado
        for output_key in output_keys:
            if output_key in session.state:
                content = session.state[output_key]
                
                # Nome do agente baseado no output_key
                agent_name = output_key.replace('_output', '')
                
                # Criar conte√∫do markdown
                markdown_content = f"# {agent_name.title()} Agent Output\n\n"
                markdown_content += f"**Timestamp:** {timestamp}\n\n"
                markdown_content += f"**Session ID:** {session_id}\n\n"
                markdown_content += f"**Agent:** {agent_name}_agent\n\n"
                markdown_content += "---\n\n"
                markdown_content += str(content)
                
                # Salvar arquivo markdown
                filename = f"{markdown_dir}/{agent_name}_output.md"
                with open(filename, "w", encoding="utf-8") as f:
                    f.write(markdown_content)
                
                print(f"‚úÖ Saved {agent_name} output to {filename}")
                
                # Salvar output do coder como arquivo .py adicional
                if agent_name == 'coder':
                    python_filename = f"{markdown_dir}/coder_output.py"
                    with open(python_filename, "w", encoding="utf-8") as f:
                        # Adicionar header com informa√ß√µes
                        f.write(f"# Coder Agent Output\n")
                        f.write(f"# Timestamp: {timestamp}\n")
                        f.write(f"# Session ID: {session_id}\n")
                        f.write(f"# Generated by: coder_agent\n\n")
                        f.write(str(content))
                    
                    print(f"üêç Saved coder output as Python file: {python_filename}")
                
                # Opcionalmente salvar como artifact para persist√™ncia
                if hasattr(runner, 'artifact_service') and runner.artifact_service:
                    artifact_data = markdown_content.encode('utf-8')
                    artifact_part = types.Part.from_bytes(
                        data=artifact_data, 
                        mime_type="text/markdown"
                    )
                    
                    artifact_filename = f"{agent_name}_output_{timestamp}.md"
                    await runner.artifact_service.save_artifact(
                        app_name=APP_NAME,
                        user_id=user_id,
                        session_id=session_id,
                        filename=artifact_filename,
                        artifact=artifact_part
                    )
                    print(f"üìÅ Saved {agent_name} output as artifact: {artifact_filename}")
        
        # Criar arquivo consolidado com todos os outputs
        consolidated_content = f"# Consolidated Agent Outputs\n\n"
        consolidated_content += f"**Timestamp:** {timestamp}\n\n"
        consolidated_content += f"**Session ID:** {session_id}\n\n"
        consolidated_content += "---\n\n"
        
        for output_key in output_keys:
            if output_key in session.state:
                agent_name = output_key.replace('_output', '')
                consolidated_content += f"## {agent_name.title()} Agent\n\n"
                consolidated_content += str(session.state[output_key])
                consolidated_content += "\n\n---\n\n"
        
        consolidated_filename = f"{markdown_dir}/consolidated_outputs.md"
        with open(consolidated_filename, "w", encoding="utf-8") as f:
            f.write(consolidated_content)
        
        print(f"üìã Saved consolidated outputs to {consolidated_filename}")
        
        # Copiar arquivos adicionais para o diret√≥rio de outputs
        additional_files = [
            "technical_spec_generated.md",
            "architecture.md"
        ]
        
        for file_name in additional_files:
            source_path = file_name
            if os.path.exists(source_path):
                dest_path = os.path.join(markdown_dir, file_name)
                try:
                    shutil.copy2(source_path, dest_path)
                    print(f"üìÑ Copied {file_name} to {dest_path}")
                except Exception as copy_error:
                    print(f"‚ö†Ô∏è Warning: Could not copy {file_name}: {copy_error}")
            else:
                print(f"‚ö†Ô∏è Warning: {file_name} not found in root directory")
        
    except Exception as e:
        print(f"‚ùå Error saving output_keys to markdown: {e}")
        # Log do erro mas n√£o interrompe a execu√ß√£o
        import traceback
        traceback.print_exc()
