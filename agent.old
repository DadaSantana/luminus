from dotenv import load_dotenv
import os


load_dotenv()


import datetime
from zoneinfo import ZoneInfo
from google.adk.agents import Agent


def get_weather(city: str) -> dict:
    """Retrieves the current weather report for a specified city using OpenWeatherMap API.

    Args:
        city (str): The name of the city for which to retrieve the weather report.

    Returns:
        dict: status and result or error msg.
    """
    import requests
    import os
    
    # Usar API gratuita do OpenMeteo (não precisa de chave)
    try:
        # Primeiro, buscar coordenadas da cidade
        geocoding_url = f"https://geocoding-api.open-meteo.com/v1/search?name={city}&count=1&language=pt&format=json"
        geo_response = requests.get(geocoding_url, timeout=10)
        
        if geo_response.status_code == 200:
            geo_data = geo_response.json()
            
            if geo_data.get('results'):
                location = geo_data['results'][0]
                lat = location['latitude']
                lon = location['longitude']
                city_name = location['name']
                country = location.get('country', '')
                
                # Agora buscar dados do clima
                weather_url = f"https://api.open-meteo.com/v1/forecast?latitude={lat}&longitude={lon}&current=temperature_2m,relative_humidity_2m,weather_code&timezone=auto"
                weather_response = requests.get(weather_url, timeout=10)
                
                if weather_response.status_code == 200:
                    weather_data = weather_response.json()
                    current = weather_data['current']
                    
                    temp_c = current['temperature_2m']
                    humidity = current['relative_humidity_2m']
                    weather_code = current['weather_code']
                    
                    # Mapear códigos de clima para descrições
                    weather_descriptions = {
                        0: "céu limpo",
                        1: "pouco nublado",
                        2: "parcialmente nublado", 
                        3: "nublado",
                        45: "neblina",
                        48: "neblina com geada",
                        51: "chuvisco leve",
                        53: "chuvisco moderado",
                        55: "chuvisco intenso",
                        61: "chuva leve",
                        63: "chuva moderada",
                        65: "chuva intensa",
                        71: "neve leve",
                        73: "neve moderada",
                        75: "neve intensa",
                        95: "tempestade"
                    }
                    
                    description = weather_descriptions.get(weather_code, "variável")
                    temp_f = (temp_c * 9/5) + 32
                    
                    location_name = f"{city_name}, {country}" if country else city_name
                    report = f"O clima em {location_name} está {description} com temperatura de {temp_c:.1f}°C ({temp_f:.1f}°F) e umidade de {humidity}%."
                    
                    return {
                        "status": "success",
                        "report": report
                    }
                else:
                    return {
                        "status": "error",
                        "error_message": f"Erro ao buscar dados do clima para '{city}'."
                    }
            else:
                return {
                    "status": "error",
                    "error_message": f"Não consegui encontrar a cidade '{city}'. Verifique se o nome está correto."
                }
        else:
            return {
                "status": "error",
                "error_message": f"Erro ao localizar a cidade '{city}'."
            }
            
    except Exception as e:
        return {
            "status": "error",
            "error_message": f"Erro ao buscar informações do clima: {str(e)}"
        }



def get_current_time(city: str) -> dict:
    """Returns the current time in a specified city using timezone lookup.

    Args:
        city (str): The name of the city for which to retrieve the current time.

    Returns:
        dict: status and result or error msg.
    """
    import requests
    
    # Mapeamento de cidades para timezones
    timezone_map = {
        "new york": "America/New_York",
        "irlanda": "Europe/Dublin", 
        "dublin": "Europe/Dublin",
        "london": "Europe/London",
        "paris": "Europe/Paris",
        "tokyo": "Asia/Tokyo",
        "são paulo": "America/Sao_Paulo",
        "rio de janeiro": "America/Sao_Paulo",
        "los angeles": "America/Los_Angeles",
        "chicago": "America/Chicago",
        "miami": "America/New_York",
        "toronto": "America/Toronto",
        "vancouver": "America/Vancouver",
        "madrid": "Europe/Madrid",
        "berlin": "Europe/Berlin",
        "roma": "Europe/Rome",
        "amsterdam": "Europe/Amsterdam",
        "bruxelas": "Europe/Brussels",
        "viena": "Europe/Vienna",
        "praga": "Europe/Prague",
        "budapeste": "Europe/Budapest",
        "varsóvia": "Europe/Warsaw",
        "moscou": "Europe/Moscow",
        "pequim": "Asia/Shanghai",
        "xangai": "Asia/Shanghai",
        "hong kong": "Asia/Hong_Kong",
        "singapura": "Asia/Singapore",
        "seul": "Asia/Seul",
        "bangkok": "Asia/Bangkok",
        "jakarta": "Asia/Jakarta",
        "mumbai": "Asia/Kolkata",
        "delhi": "Asia/Kolkata",
        "dubai": "Asia/Dubai",
        "tel aviv": "Asia/Jerusalem",
        "cairo": "Africa/Cairo",
        "nairobi": "Africa/Nairobi",
        "johannesburg": "Africa/Johannesburg",
        "lagos": "Africa/Lagos",
        "cidade do cabo": "Africa/Johannesburg",
        "sydney": "Australia/Sydney",
        "melbourne": "Australia/Melbourne",
        "perth": "Australia/Perth",
        "auckland": "Pacific/Auckland",
        "wellington": "Pacific/Auckland"
    }
    
    city_lower = city.lower()
    
    if city_lower in timezone_map:
        tz_identifier = timezone_map[city_lower]
    else:
        # Tentar buscar timezone via API
        try:
            url = f"https://worldtimeapi.org/api/timezone/Europe/London"
            response = requests.get(url, timeout=5)
            if response.status_code == 200:
                # Usar timezone padrão se não encontrar
                tz_identifier = "UTC"
            else:
                return {
                    "status": "error",
                    "error_message": f"Desculpe, não tenho informações sobre o fuso horário de '{city}'. Posso ajudar com muitas cidades principais do mundo."
                }
        except:
            return {
                "status": "error", 
                "error_message": f"Desculpe, não tenho informações sobre o fuso horário de '{city}'. Posso ajudar com muitas cidades principais do mundo."
            }

    try:
        tz = ZoneInfo(tz_identifier)
        now = datetime.datetime.now(tz)
        report = f"O horário atual em {city} é {now.strftime('%d/%m/%Y %H:%M:%S %Z')}"
        return {"status": "success", "report": report}
    except Exception as e:
        return {
            "status": "error",
            "error_message": f"Erro ao obter horário para {city}: {str(e)}"
        }



root_agent = Agent(
    name="general_knowledge_agent",
    model="gemini-2.0-flash",
    description=(
        "Agent to answer general questions including geography, history, science, and also provide weather and time information for cities."
    ),
    instruction=(
        "You are a helpful and knowledgeable agent who can answer a wide variety of questions including:"
        "- General knowledge questions (geography, history, science, culture, etc.)"
        "- Weather information for cities using the get_weather tool"
        "- Current time for cities using the get_current_time tool"
        "- Any other questions the user might have"
        "\nAlways provide accurate, helpful, and detailed responses. If you need to get weather or time information, use the appropriate tools."
    ),
    tools=[get_weather, get_current_time],
)